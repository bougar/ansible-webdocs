#!/usr/bin/env python

from os import walk,listdir
from os.path import isfile, join
from ansible.plugins.loader import fragment_loader
from ansible.utils import plugin_docs
from ansible.module_utils.basic import *

DOCUMENTATION = '''
---

module: ansible_docstring
short_description: Create markdown file for a modules docs
description:
    - Offers ability to dynamically create local markdown files
      (web docs) to be used offline for custom modules without
      requiring use of 'make webdocs'.  Also works on Core modules.
    - Only a single dir is supported in this release (no recursive dirs)
author: Jason Edelman (@jedelman8)
requirements:
    - Ansible must be installed
    - Modules must have proper Ansible doc and example strings
    - 'modules' must be the variable name that is registered in the playbook
    - The Jinja template called ansible-docs.j2 is required
notes:
    - This module uses module_docs that that is part of the Ansible project
      to extract the required strings from Ansible modules
options:
    path:
        description:
            - absolute path to a directory where the Ansible module(s) are stored
        required: true
        default: null
        choices: []
        aliases: []
'''

EXAMPLES = '''
# FULL PLAYBOOK EXAMPLE
  - name: get docs and examples for modules
    ansible_docstring: path=/usr/share/ansible/files/
    register: modules

  - name: build web/markdown ansible docs
    template: src=templates/ansible-docs.j2 dest=web/ansiblefilesdoc.md
'''
def isPython(path):
    if isfile(path):
        filename, file_extension = os.path.splitext(path)
        if file_extension == ".py":
            return True
    return False

def main():
    module = AnsibleModule(
        argument_spec=dict(
            path=dict(required=True),
        ),
        supports_check_mode=False
    )

    path = module.params['path']

    docs = []
    errors = []

    moduleFiles = [join(path,f) for f in listdir(path) if isPython(join(path, f))]

    for mod in moduleFiles:
        try:
            doc, examples, returndocs, metadata = plugin_docs.get_docstring(mod, fragment_loader)
            try:
                examples_list = examples.split('\n')
                doc['examples'] = examples_list
            except:
                errors.append(doc)
                errors.append('error-examples')
                continue
            docs.append(doc)
        except Exception as e:
            errors.append(mod)
            errors.append('unknown')
            continue

    module.exit_json(results=docs, errors=errors)

if __name__ == "__main__":
    main()
